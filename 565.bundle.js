"use strict";(self.webpackChunkwebpack=self.webpackChunkwebpack||[]).push([[565],{565:(t,s,i)=>{i.r(s),i.d(s,{ManualSlotExample:()=>l});var e=i(608),n=i(684);let l=(()=>{let t,s,i,l,a,o,d=[(0,n.uAl)({selector:"manual-slot",encapsulation:"shadow-dom",shadowRootInit:{mode:"open",slotAssignment:"manual"},template:'<div class="d-flex">\n\t\t<div>\n\t\t\tslot begin\n\t\t\t<slot #slot name="slot-el">NEED DESCRIPTION</slot>\n\t\t\tslot end\n\t\t</div>\n\t\t<div #div1 slot="slot-el">div A</div>\n\t\t<div #div2 slot="slot-el">div B</div>\n\t\t<div>\n\t\t\t<button class="btn btn-primary" @click="assignDiv1()">Assign div A</button>\n\t\t\t<button class="btn btn-primary" @click="assignDiv2()">Assign div B</button>\n\t\t\t<button class="btn btn-primary" @click="assign(++count)">Append div {{count + 1}}</button>\n\t\t</div>\n\t\t<div>\n\t\t</div>\n\t</div>'})],v=[],c=[],u=[],h=[],m=[],r=[],b=[],p=[],g=[];return class{static{s=this}static{const w="function"==typeof Symbol&&Symbol.metadata?Object.create(null):void 0;i=[(0,n.Ss2)()],l=[(0,n.Uct)("slot")],a=[(0,n.Uct)("div1")],o=[(0,n.Uct)("div2")],(0,e.G4)(null,null,i,{kind:"field",name:"view",static:!1,private:!1,access:{has:t=>"view"in t,get:t=>t.view,set:(t,s)=>{t.view=s}},metadata:w},c,u),(0,e.G4)(null,null,l,{kind:"field",name:"slot",static:!1,private:!1,access:{has:t=>"slot"in t,get:t=>t.slot,set:(t,s)=>{t.slot=s}},metadata:w},h,m),(0,e.G4)(null,null,a,{kind:"field",name:"div1",static:!1,private:!1,access:{has:t=>"div1"in t,get:t=>t.div1,set:(t,s)=>{t.div1=s}},metadata:w},r,b),(0,e.G4)(null,null,o,{kind:"field",name:"div2",static:!1,private:!1,access:{has:t=>"div2"in t,get:t=>t.div2,set:(t,s)=>{t.div2=s}},metadata:w},p,g),(0,e.G4)(null,t={value:s},d,{kind:"class",name:s.name,metadata:w},null,v),s=t.value,w&&Object.defineProperty(s,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:w}),(0,e.zF)(s,v)}count=0;view=(0,e.zF)(this,c,void 0);slot=((0,e.zF)(this,u),(0,e.zF)(this,h,void 0));div1=((0,e.zF)(this,m),(0,e.zF)(this,r,void 0));div2=((0,e.zF)(this,b),(0,e.zF)(this,p,void 0));onInit(){void 0!==this.slot&&console.error("slot should be not defied yet")}afterViewInit(){void 0===this.slot&&console.error("slot should be not `undefined` yet"),this.slot.addEventListener("slotchange",(t=>{const s=this.slot.assignedNodes();console.log(`Element in Slot "${this.slot.name}" changed to:`,s)})),this.view.append(this.div1),this.view.append(this.div2)}assign(t){const s=document.createElement("div");s.innerText="manual slot assignment "+t,this.view.append(s),this.slot.assign(s),console.log(this.slot,s)}assignDiv1(){this.slot.assign(this.div1)}assignDiv2(){this.slot.assign(this.div2)}constructor(){(0,e.zF)(this,g)}},s})()}}]);